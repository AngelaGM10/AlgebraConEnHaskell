\begin{code}
module TAHField
  ( module TAHIntegralDomain
  , Field(inv)
  , propMulInv, propField
  , (</>)
  ) where

import Test.QuickCheck
import TAHIntegralDomain 

\end{code}

\begin{defi}
Un cuerpo es un anillo de división conmutativo, es decir, un anillo conmutativo y unitario en el que todo elemento distinto de cero es invertible respecto del producto. Un cuerpo R es un dominio de integridad que contiene para cada elemento $a \neq\, 0$ un inverso $a^{-1}$ que verifica la igualdad: $a^{-1}a = 1$.​ 
\end{defi}

\begin{code}
-- | Definición de cuerpo.
class IntegralDomain a => Field a where
  inv :: a -> a
propMulInv :: (Field a, Eq a) => a -> Bool
propMulInv a = a == zero || inv a <**> a == one
\end{code}

Para saber si un anillo conmutativo es un cuerpo usaremos la función:
\begin{code}
propField :: (Field a, Eq a) => a -> a -> a -> Property
propField a b c = if propMulInv a
                     then propIntegralDomain a b c 
                     else whenFail (print "propMulInv") False
\end{code}

En un cuerpo se puede definir la división. Para poder dar dicha definición establecemos el orden de prioridad para el símbolo de la división.

\begin{code}
infixl 7 </>

-- | División
(</>) :: Field a => a -> a -> a
x </> y = x <**> inv y
\end{code}
